import logging
import datetime
import asyncio
import pprint

from aiogram.types import BotCommand, CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.callback_data import CallbackData
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram_calendar import simple_cal_callback, SimpleCalendar, dialog_cal_callback, DialogCalendar

import hotels_requests
from config import API_TOKEN
from typing import Dict

from tg_bot.database import add_user
from tg_bot.misc.other_func import print_data_without_photo, print_data_with_photo
from tg_bot.keyboards.base_btn import photo_hotel, photo_choice, ikb
from tg_bot.state.lowprice_state import ClientStatesGroup, ProfileStatesGroup, LowPrice
# from tg_bot.database.SQlite import db_start, create_profile, edit_profile


logging.basicConfig(level=logging.INFO)

cb = CallbackData('inline_kb', 'action')  # pattern # –∫–æ–ª–ª–±–µ–∫ –∫–Ω–æ–ø–∫–∏
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)  # —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ API
dp = Dispatcher(bot=bot,
                storage=storage)


async def set_default_commands(dp) -> None:
    commands = [
        BotCommand(command='start', description='Start the bot'),
        BotCommand(command='help', description='Show all commands'),
        BotCommand(command='lowprice', description='Must lower value')
        # BotCommand(command='custom', description='Custom setting search'),
        # BotCommand(command='history', description='Request history'),
        # BotCommand(command='photo', description='Get photo'),
        # BotCommand(command='create', description='new profile')
    ]
    await dp.bot.set_my_commands(commands=commands)


# –∫–æ–ª–ª–±–µ–∫ –∫–Ω–æ–ø–∫–∏
def get_inline() -> InlineKeyboardMarkup:
    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton('Button1', callback_data=cb.new('push_1'))],
        [InlineKeyboardButton('Button2', callback_data=cb.new('push_2'))]
    ])

    return inline_kb


def get_city_btn(city_list: Dict):
    keyboard = []
    for city_id, city_name in city_list.items():
        button = InlineKeyboardButton(city_name, callback_data=city_id)
        keyboard.append([button])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# –∫–Ω–æ–ø–∫–∞ –¥–ª—è FSM
def get_keyboard() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!'))
    return kb


def get_cancel() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('/cancel'))


# –ö–æ–Ω–µ—Ü


start_kb = ReplyKeyboardMarkup(resize_keyboard=True, )
start_kb.row('Navigation Calendar', 'Dialog Calendar')


async def on_startup(dp):
    print('–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã...')
    await set_default_commands(dp)
    print('–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    # await db_start()
    print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')


HELP_CMD = """"
<b>/help</b> - <em>—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥</em>
<b>/start</b> - <em>–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º</em>
<b>/lowprice</b> - <em>–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º</em>
"""


@dp.message_handler(commands=['cancel'], state='*')
async def cmd_stop(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return

    await message.reply('–ì–∞–ª—è, –æ—Ç–º–µ–Ω–∞!')
    await state.finish()


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message) -> None:
    user_name = message.from_user.full_name
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫.\n"
                        f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∂–∏–ª—å–µ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö –∏ –≥–æ—Ä–æ–¥–∞—Ö.")

    # await create_profile(user_id=message.from_user.id)  # —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª—å —é–∑–µ—Ä–∞
    await add_user(message.chat.id, message.from_user.username, message.from_user.full_name)
    await message.delete()


@dp.message_handler(commands=['lowprice'])
async def city_input(message: types.Message) -> None:
    await message.reply('–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –ø–æ–∏—Å–∫. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞',
                        reply_markup=get_cancel())
    await LowPrice.city.set()


@dp.message_handler(state=LowPrice.city)
async def load_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text

    possible_city = hotels_requests.destination_id(data['city'])
    await message.answer('–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥: ', reply_markup=get_city_btn(possible_city))
    await LowPrice.destinationId.set()


@dp.callback_query_handler(lambda callback_query: True, state=LowPrice.destinationId)
async def load_city_id(callback_query: types.CallbackQuery, state: FSMContext):
    city_id = callback_query.data
    async with state.proxy() as data:
        data['destinationId'] = city_id
    await bot.send_message(callback_query.from_user.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {city_id}!")
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=None)
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞",
                                        reply_markup=await SimpleCalendar().start_calendar())
    await LowPrice.date_of_entry.set()


@dp.callback_query_handler(simple_cal_callback.filter(), state=LowPrice.date_of_entry)
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ {date.strftime("%d/%m/%Y")}')
        await state.update_data(date_of_entry=datetime.datetime.strptime(date.strftime("%Y%m%d"), "%Y%m%d").date())
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞',
                                            reply_markup=await SimpleCalendar().start_calendar())
        await LowPrice.departure_date.set()


@dp.callback_query_handler(simple_cal_callback.filter(), state=LowPrice.departure_date)
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ {date.strftime("%d/%m/%Y")}')
        await state.update_data(departure_date=datetime.datetime.strptime(date.strftime("%Y%m%d"), "%Y%m%d").date())
        await callback_query.message.answer('–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑–∞—Ç—å? (–æ—Ç 1 –¥–æ 5)')
        await LowPrice.quantity_hotels.set()


@dp.message_handler(state=LowPrice.quantity_hotels)
async def load_quantity_hotels(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['quantity_hotels'] = message.text

    await message.answer('–ù—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?', reply_markup=photo_hotel)
    await message.delete()
    await LowPrice.need_photo.set()


@dp.message_handler(Text(equals='–ù–ï–¢ üö´Ô∏è'), state=LowPrice.need_photo)
async def need_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['need_photo'] = message.text
        await message.reply('–î–µ—Ä–∂–∏ –±–µ–∑ —Ñ–æ—Ç–æ')
        await print_data_without_photo(message, data)
    await state.finish()


@dp.message_handler(Text(equals='–î–ê ‚òëÔ∏è'), state=LowPrice.need_photo)
async def get_quantity_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['need_photo'] = message.text
    await message.answer('–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å?', reply_markup=ReplyKeyboardRemove())
    await LowPrice.quantity_photo.set()
    await message.delete()


@dp.message_handler(state=LowPrice.quantity_photo)
async def send_result_with_photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['quantity_photo'] = message.text
        await message.reply('–î–µ—Ä–∂–∏ —Å —Ñ–æ—Ç–æ')
        await print_data_with_photo(message, data)
    await state.finish()


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text=HELP_CMD, parse_mode='HTML')  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫—É —é–∑–µ—Ä—É


@dp.message_handler(content_types=['text'])
async def echo_handler(message: types.Message):
    user_name = message.from_user.full_name
    if message.text.lower() == "–ø—Ä–∏–≤–µ—Ç":
        await message.reply(f'–ü—Ä–∏–≤–µ—Ç, {user_name} ! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É')
    else:
        await message.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Ç–≤–µ—Ä–¥–æ –∏ —á–µ—Ç–∫–æ')


@dp.message_handler(content_types=types.ContentType.PHOTO)
async def audio_handler(message: types.Message):
    await message.reply('–Ø –Ω–µ –∏—â—É –æ—Ç–µ–ª–∏ –ø–æ —Ñ–æ—Ç–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

# —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é FSM__________________________________________________________________________
# @dp.message_handler(commands=['cancel'], state='*')
# async def cmd_start(message: types.Message, state: FSMContext) -> None:
#     current_state = await state.get_state()
#     if current_state is None:
#         return
#
#     await message.reply('–ì–∞–ª—è, –æ—Ç–º–µ–Ω–∞!')
#     await state.finish()
#
#
# @dp.message_handler(commands=['create'])
# async def cmd_create(message: types.Message) -> None:
#     await message.reply('–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ',
#                         reply_markup=get_cancel())
#     await ProfileStatesGroup.photo.set()    # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ç–æ. –ë–æ—Ç –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#
#
# @dp.message_handler(lambda message: not message.photo, state=ProfileStatesGroup.photo)
# async def check_photo(message: types.Message):
#     await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è')
#
#
# @dp.message_handler(content_types=['photo'], state=ProfileStatesGroup.photo) # —Ö—ç–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ state
# async def load_photo(message: types.Message, state: FSMContext) -> None:
#     async with state.proxy() as data:  #  –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
#         data['photo'] = message.photo[0].file_id    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ id-—Ñ–æ—Ç–æ
#
#     await message.reply('–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –∏–º—è')
#     await ProfileStatesGroup.next()   # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ
#
#
# @dp.message_handler(lambda message: not message.text.isdigit() or float(message.text) > 100,
#                     state=ProfileStatesGroup.age)
# async def check_photo(message: types.Message):
#     await message.reply('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!')
#
#
# @dp.message_handler(state=ProfileStatesGroup.name)
# async def load_name(message: types.Message, state: FSMContext) -> None:
#     async with state.proxy() as data:  #  –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
#         data['name'] = message.text   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ name
#
#     await message.reply('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
#     await ProfileStatesGroup.next()   # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ
#
#
# @dp.message_handler(state=ProfileStatesGroup.age)
# async def load_age(message: types.Message, state: FSMContext) -> None:
#     async with state.proxy() as data:  #  –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
#         data['age'] = message.text   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ age
#
#     await message.reply('–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–æ–Ω–æ–≥–æ –æ —Å–µ–±–µ')
#     await ProfileStatesGroup.next()   # –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ
#
#
# @dp.message_handler(state=ProfileStatesGroup.descr)
# async def load_descr(message: types.Message, state: FSMContext) -> None:
#     async with state.proxy() as data:  #  –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
#         data['descr'] = message.text   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ descr
#         await bot.send_photo(chat_id=message.from_user.id,
#                                photo=data['photo'], caption=f"{data['name']}, {data['age']}\n{data['descr']}"
#                                                             )
#     await edit_profile(state, user_id=message.from_user.id)
#     await message.reply('–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞')
#     await state.finish()   # –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
# –∫–æ–Ω–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏


# –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è FSM
# @dp.message_handler(commands=['start_push'])
# async def cmd_start(message: types.Message) -> None:
#     await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
#                          reply_markup=get_keyboard())
#
#
# @dp.message_handler(commands=['cancel'], state='*')
# async def cmd_start(message: types.Message, state: FSMContext) -> None:
#     current_state = await state.get_state()
#     if current_state is None:
#         return
#
#     await message.reply('–û—Ç–º–µ–Ω–∏–ª',
#                         reply_markup=get_keyboard())
#     await state.finish()
#
#
# @dp.message_handler(Text(equals='–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!', ignore_case=True), state=None)
# async def start_work(message: types.Message) -> None:
#     await ClientStatesGroup.photo.set()
#     await message.answer('–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!',
#                          reply_markup=get_cancel())
#
#
# @dp.message_handler(lambda message: not message.photo, state=ClientStatesGroup.photo)
# async def check_photo(message: types.Message):
#     return await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!')
#
#
# @dp.message_handler(lambda message: message.photo, content_types=['photo'], state=ClientStatesGroup.photo)
# async def load_photo(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['photo'] = message.photo[0].file_id
#
#     await ClientStatesGroup.next()
#     await message.reply('–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–º –æ–ø–∏—Å–∞–Ω–∏–µ!')
#
#
# @dp.message_handler(state=ClientStatesGroup.descr)
# async def load_photo(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data['descr'] = message.text
#
#     await message.reply('–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')
#
#     async with state.proxy() as data:
#         await bot.send_photo(chat_id=message.from_user.id,
#                              photo=data['photo'],
#                              caption=data['descr'])
#
#     await state.finish()
# –∫–æ–Ω–µ—Ü


# –∫–æ–ª–ª–±–µ–∫ –∫–Ω–æ–ø–∫–∏
# @dp.message_handler(commands=['test'])
# async def send_welcome(message: types.Message):
#     await message.reply(text='Welcome!', reply_markup=get_inline())
#
#
# @dp.callback_query_handler(cb.filter(action='push_1'))
# async def push_first_cb_handler(callback: types.CallbackQuery) -> None:
#     await callback.answer('Hello!')
#
#
# @dp.callback_query_handler(cb.filter(action='push_2'))
# async def push_sec_cb_handler(callback: types.CallbackQuery) -> None:
#     await callback.answer('World!')
# –∫–æ–Ω–µ—Ü


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ—á–µ–∫
# @dp.message_handler(commands=['photo'])
# async def send_image(message: types.Message):
#     await message.answer(text='–ö–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?', reply_markup=photo_choice)
#     await message.delete()
#
#
# @dp.message_handler(Text(equals='–ö–æ—Ç–∏–∫–∏'))
# async def send_cats(message: types.Message):
#     await bot.send_photo(chat_id=message.from_user.id,
#                          photo='http://vsesvoi43.ru/wp-content/uploads/2020/09/kogo-zavesti-kota-ili-koshku.jpg',
#                          caption='–ù—Ä–∞–≤–∏—Ç—Å—è –∫–æ—Ç–∏–∫–∏?',
#                          reply_markup=ikb)
#     await message.delete()
#
#
# @dp.message_handler(Text(equals='–°–æ–±–∞—á–∫–∏'))
# async def send_dogs(message: types.Message):
#     await bot.send_photo(chat_id=message.from_user.id,
#                          photo='https://klike.net/uploads/posts/2023-01/1675061216_3-25.jpg',
#                          caption='–ù—Ä–∞–≤–∏—Ç—Å—è —Å–æ–±–∞—á–∫–∞?',
#                          reply_markup=ikb)
#     await message.delete()
#
#
# @dp.callback_query_handler()
# async def vote_callback(callback: types.CallbackQuery):
#     if callback.data == 'like':
#         await callback.answer(text='–¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –∫–æ—Ç–∏–∫–∏!')
#     await callback.answer(text='–¢–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –∫–æ—Ç–∏–∫–∏(')
# # –∫–æ–Ω–µ—Ü
